plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.4.4"
}

version = "${property("mod.version")}+${stonecutter.current.version}"
group = property("mod.maven_group")

base {
	archivesName = property("mod.archives_base_name")
}

repositories {
	maven {
		url "https://maven.enjarai.nl/releases"
	}
	maven {
		url "https://maven.enjarai.nl/mirrors"
	}

	maven {
		name "Terraformers Maven"
		url 'https://maven.terraformersmc.com'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${stonecutter.current.version}"
	mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property('deps.loader')}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric_api')}"

	modImplementation "com.terraformersmc:modmenu:${property('deps.modmenu')}"
}

processResources {
	var replaceProperties = [
			version: project.version,
			mc_target: findProperty("mod.mc_target"),
			github_repo: findProperty("publish.github_repo")
	]

	inputs.properties replaceProperties
	filesMatching(['fabric.mod.json']) {
		expand replaceProperties
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

if (stonecutter.current.isActive()) { // run configs for non-active version would be invalid
	loom {
		runConfigs.all {
			ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
			runDir "../../run" // use a global run directory for all versions
		}
	}
}

publishMods {
	file = remapJar.archiveFile
	displayName = "${property('mod.version')} for ${stonecutter.current.version}"
	version = project.version
	changelog = getRootProject().file("CHANGELOG.md").text
	type = STABLE
	modLoaders.add("fabric")

	def min = property('publish.target_min')
	def max = property('publish.target_max')

	modrinth {
		projectId = property('publish.modrinth_id')
		accessToken = providers.gradleProperty('enjaraiModrinthToken').get()

		if (min == max) {
			minecraftVersions.add(min)
		} else {
			minecraftVersionRange {
				start = min
				end = max
			}
		}

		requires { slug = "fabric-api" }
	}

	github {
		repository = property('publish.github_repo')
		accessToken = providers.gradleProperty('enjaraiGithubToken').get()

		commitish = "master"
		tagName = project.version
	}
}